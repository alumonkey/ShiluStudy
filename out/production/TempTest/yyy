String returnTxt = "r:" + inv.getRequest().getAttribute("rootPath") + "/game/gameTipsInfo/";
        Long developerId = RequestUtil.getLongAttributeFromRequest(inv.getRequest(), "developerId");
        Byte developerType = RequestUtil.getByteAttributeFromRequest(inv.getRequest(), "developerType");
        AppData app = parseResult.getAppData();
        int returnCode = parseResult.getReturnCode();
        if (returnCode != SUCCESS) {
            LOGGER.error("apk解析失败[" + returnCode + "]");
            switch (returnCode) {
                case IMAGE_FORMAT_ERROR :// apk图片格式错误
                    return returnTxt + IMAGE_FORMAT_ERROR;
                case APK_UPLOAD_ERROR :// APK文件上传错误
                case ICON_UPLOAD_ERROR :// 图标文件上传错误
                case AAPT_COMMAND_ERROR :// 调用命令aapt错误
                case APK_MD5_ERROR :// 计算APK文件哈希值错误
                    return returnTxt + UPLOAD_SERVER_ERROR;
                case AAPT_OUTPUT_ERROR :// aapt输出错误
                    return returnTxt + AAPT_OUTPUT_ERROR;
                case RELEASE_KEY_ERROR :// 解析签名异常
                    return returnTxt + RELEASE_KEY_ERROR;
                case RELEASE_KEY_NOT_EQUAL :// 签名不一致
                    // TODO fix
                    StringBuilder params = new StringBuilder();
                    KeyStore keyStore = client.getKeyStoreByPackageName(app.getAppInfo().getPackageName());
                    params.append("?").append("originalReleaseKeyHash").append("=").append(keyStore.getOriginalReleaseKeyHash());
                    params.append("&").append("orgParsedAppReleaseKeyHash").append("=").append(app.getReleaseKey().getReleaseKeyHash());
                    int sdkBitSet = app.getApkInfos().get(0).getIsSdkUpdate();
                    if (SDKUtils.isPaymentSDK(sdkBitSet)) {
                        params.append("&").append("paymentSDK").append("=").append(true);
                    } else {
                        params.append("&").append("paymentSDK").append("=").append(false);
                    }
                    return returnTxt + RELEASE_KEY_NOT_EQUAL + params;
                default :
                    return returnTxt + APK_PARSE_ERROR;
            }
        }
        if (AppAction.checkSuitableTypeConflict(inv, app)) {
            return returnTxt + SUITABLE_TYPE_FAMILY_CONFLICT;
        }

        if (ModelUtils.isEmpty(app)) {
            return returnTxt + AppController.NULL;
        }
        int result = this.devAppProxy.checkCreateAppCondition(app);

        if (result != SUCCESS) {
            switch (result) {
                case APK_PARSE_ERROR :// apk解析失败
                    return returnTxt + APK_PARSE_ERROR;
                case BAN_ONLINE :// 禁止上线
                    return returnTxt + BAN_ONLINE;
                case NOT_OWN :// 不属于当前开发者
                    return returnTxt + NOT_OWN;
                case NEED_APKUPDATA :
                    return returnTxt + NEED_APKUPDATA;
                default :
                    return returnTxt + NULL;
            }
        }

        String packageNameHash = app.getAppInfo().getPackageNameHash();

        PageType pageType = PageType.fromValue(RequestUtil.getStringAttributeFromRequest(inv.getRequest(), BackendConstants.PAGE_TYPE));

        // 查找对应关系：1.添加新应用，需找有没有同包名的应用；2.直接发布，需检查与之前填的是否相同
        long devAppId = (StringUtils.isEmpty(appId) ? 0 : Long.valueOf(appId));
        AuthAppInfo appInfo = appInfoProxy.getAuthAppInfoById(devAppId);
        if (null == appInfo || appInfo.isNullVal()) { // 直接发布，需找同包名的
            List<Integer> typeList = new ArrayList<Integer>();
            if (pageType == PageType.PHONE_APP) {
                typeList.add(OpenPlatform.Authentication.APP_TYPE_PHONE);
            } else if (pageType == PageType.TV_APP) {
                typeList.add(OpenPlatform.Authentication.APP_TYPE_TV);
            }
            AuthAppInfoWrapper wrapper = appInfoProxy.getAuthAppInfoByDevId(developerId, typeList, 0, Integer.MAX_VALUE);
            for (AuthAppInfo item : wrapper.getData()) {
                if (app.getAppInfo().getPackageName().equals(item.getPackageName())) {
                    devAppId = item.getAppId();
                    break;
                }
            }
        } else {
            if (!app.getAppInfo().getPackageName().equals(appInfo.getPackageName())) {
                inv.addModel("tips", "PKGNAME_INCONSISTENT");
                inv.addModel("upApkPkgName", app.getAppInfo().getPackageName());
                inv.addModel("appInfoPkgName", appInfo.getPackageName());
                return "game/gameTipsInfo/tips";
            }
        }

        AppData appData = this.devAppProxy.getAppData(BackendConstants.AppObjectType.AUDIT_APP, packageNameHash);
        if (appData == null || appData.isNull()) {
            app.getAppOwnStatus().setDevAppId(devAppId);

            String defaultLanguage = authFeatureProxy.getDefaultLanguage(devAppId);
            app.getAppInfo().setDefaultLanguage(defaultLanguage);

            AppAction.setAppInvModelNew(inv, app, developerId, developerType);

            ApkInfo maxVersionApkInfo = app.getApkInfos().get(0);

            inv.addModel("size", maxVersionApkInfo.getApkSize());
        } else {
            if (AppAction.checkDeveloperOwn(appData, developerId, developerType) == false) {
                inv.addModel("tips", "NOT_OWN");
                return "game/gameTipsInfo/tips";
            }
            inv.addModel("pnerr", true);
            appData.setApkInfos(app.getApkInfos());

            appData.getAppInfo().setIcon(app.getAppInfo().getIcon());
            appData.getAppInfo().setVersionName(app.getAppInfo().getVersionName());
            appData.getAppInfo().setPermissionIds(app.getAppInfo().getPermissionIds());
            // 标记非爬虫app数据
            appData.getAppInfo().setOperatorType(BackendConstants.OperatorType.DefaultOperator);

            appData.getAppOwnStatus().setDevAppId(devAppId);

            AppAction.setAppInvModelNew(inv, appData, developerId, developerType);

            String[] ignoreProperties = {"icon", "versionName", "permissionIds", "displayName", "publisherName"};
            BeanUtils.copyProperties(appData.getAppInfo(), app.getAppInfo(), ignoreProperties);

            if (StringUtils.isBlank(app.getAppInfo().getDefaultLanguage())) {
                app.getAppInfo().setDefaultLanguage(AppConstants.Language.zh_CN);
            }

            ApkInfo maxVersionApkInfo = appData.getApkInfos().get(0);

            inv.addModel("size", maxVersionApkInfo.getApkSize());
        }
        LOGGER.info("before cache disk versionName is " + app.getAppInfo().getVersionName());
        String tmp = uploadProxy.diskCacheObject(app);
        inv.addModel("tmp", tmp);
        inv.addModel("devAppId", devAppId);

        if ("update".equals(type)) {
            return "game/upload/update-apk-info";
        }
        return "game/upload/release-info";